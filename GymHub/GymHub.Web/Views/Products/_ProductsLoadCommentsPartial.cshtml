@model ComplexModel<AddReviewInputModel, ProductInfoViewModel>
@{
    var uniqueCommentCount = 0;
    var viewModel = Model.ViewModel;
}

@if (viewModel.ParentsChildrenComments.Count > 0)
{
    @foreach (var kv in viewModel.ParentsChildrenComments)
    {

        var parentComment = kv.Key;
        var childrenComments = kv.Value;
        if (parentComment.ParentCommentId == null)
        {
            var userProductRating = viewModel.UsersProductRatings[parentComment.User];
            var repliesCount = childrenComments.Count;
            <div class="product-commentWithChildren-container">
                @await Html.PartialAsync("_ProductCommentPartial.cshtml", new ProductCommentPartialViewModel(parentComment, viewModel.ReplyCommentInputModel, userProductRating, viewModel.CurrentUserId, uniqueCommentCount++, repliesCount))
                <div @(childrenComments.Any(childComment => childComment.Id == viewModel.ToReplyComment) == true ? "" : "hidden") class="product-comment-child-container">
                    @foreach (var childComment in childrenComments)
                    {
                        ProductRatingViewModel userProductRatingChild = null;

                        @if (viewModel.UsersProductRatings.ContainsKey(childComment.User))
                        {
                            userProductRatingChild = viewModel.UsersProductRatings[childComment.User];
                        }

                        @await Html.PartialAsync("_ProductCommentPartial.cshtml", new ProductCommentPartialViewModel(childComment, viewModel.ReplyCommentInputModel, userProductRatingChild, viewModel.CurrentUserId, uniqueCommentCount++))
                        uniqueCommentCount++;
                    }
                </div>
            </div>
        }
    }
}
else
{
    <h3>There are no comments for this product</h3>
}