@using GymHub.Data.Models
@using GymHub.Common
@model ProductCommentPartialViewModel
@{
    var comment = Model.Comment;
    var userProductRating = Model.UserProductRating;
}

<div class="container-md product-comment-container">
    <div class="product-comment-userinfo-container">
        <span>
            <b>@comment.User.UserName</b> | Commented On: @comment.CommentedOn.ToLongDateString() @comment.CommentedOn.ToLongTimeString() | Rated:
        </span>
        <span style="margin-left:5px;">
            @for (int i = 0; i < userProductRating.FullStarsCount; i++)
            {
                <i class="fa fa-star gold"></i>
            }
            @if (userProductRating.HasHalfStar == true)
            {
                <i class="fa fa-star-half-o gold"></i>
            }
            @for (int i = 0; i < userProductRating.EmptyStarsCount; i++)
            {
                <i class="fa fa-star-o gold"></i>
            }
        </span>
        <hr class="product-comment-userinfo-hr" />
    </div>
    <div class="product-comment-textfield">
        <p class="align-self-md-end product-comment-text" style="font-size: larger;padding-bottom: 10px;">
            @if (comment.ParentComment?.User != null)
            {
                <span class="alert-light">@@@comment.ParentComment?.User?.UserName</span>
            }
            @comment.Text
        </p>
        <p hidden id="ReplyProductId">@comment.ProductId</p>
        <p hidden id="ReplyCommentId">@comment.Id</p>
        <p hidden id="ReplyCommentCounter">@Model.CommentCounter</p>
        @if (Model.BelongsToCurrentUser == true)
        {
            @await Html.PartialAsync("_ProductEditReviewPartial.cshtml", new EditReviewInputModel((int)userProductRating.AverageRating, comment.Text, comment.ProductId, comment.Id, comment.ParentCommentId == null, Model.CommentCounter));
        }
        @{
            var replyCommentInputModel = Model.ReplyCommentInputModel;
        }
        @if (replyCommentInputModel != null && comment.Id == replyCommentInputModel.ParentCommentId)
        {
            replyCommentInputModel.CommentCounter = Model.CommentCounter;
            @await Html.PartialAsync("_ProductCommentReplyPartial.cshtml", replyCommentInputModel);
        }
        @*else
            {
                @await Html.PartialAsync("_ProductCommentReplyPartial.cshtml", new ReplyCommentInputModel(comment.ProductId, comment.Id, Model.CommentCounter));
            }*@
    </div>
    <div class="container">
        @if (Model.RepliesCount > 0)
        {
            <button class="product-comment-replies-button">Show replies(@Model.RepliesCount)</button>
        }
        @if (Model.BelongsToCurrentUser)
        {
            <button class="product-comment-edit-button">Edit</button>
        }
        else
        {
            <button class="product-comment-reply-button">Reply</button>
        }
        @if (Model.BelongsToCurrentUser == true || this.User.IsInRole(GlobalConstants.AdminRoleName))
        {
            <form method="post" asp-controller="Products" asp-action="RemoveComment" asp-route-productId="@comment.ProductId" class="product-comment-remove-form">
                <input hidden class="post-pageFragment" name="pageFragment"/>
                <input hidden name="RemoveCommentId" value="@comment.Id"/>
                <button type="submit" class="product-comment-remove-button alert alert-danger">Remove</button>
                @Html.ValidationMessage("RemoveCommentId", new { @class = "validation-message alert-danger"})
            </form>
        }
    </div>
</div>
